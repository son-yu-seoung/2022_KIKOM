import tensorflow as tf
import pandas as pd
import matplotlib.pyplot as plt
import os
import glob

from keras.callbacks import EarlyStopping
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler



class Squat:
    
    def __init__(self):
        self.train_X = []
        self.train_Y = []
        self.test_X = []
        self.test_Y = []
        self.X_data = []
        self.Y_data = []
        self.variable_setting()
        
    def Data_load(self):
        
        Data = pd.read_csv('./bodyPerformance.csv')

        print(Data)

        self.X_data = Data[['age', 'height_cm', 'weight_kg']]
        self.Y_data = Data[['squat']]

    def Data_processing(self):
        scaler_x=MinMaxScaler()
        scaler_x.fit(self.X_data)
        Normalization_data_x=scaler_x.transform(self.X_data)

        self.train_X = pd.DataFrame(data=Normalization_data_x)

        self.scaler_y=MinMaxScaler()
        self.scaler_y = self.scaler_y.fit(self.Y_data)
        train_Normalization_data_y= self.scaler_y.transform(self.Y_data)

        self.train_Y = pd.DataFrame(data=train_Normalization_data_y)
        
        self.train_x, self.test_x, self.train_y, self.test_y = train_test_split(self.train_X, self.train_Y, test_size = 0.1, random_state=0, shuffle = True)

    def Model(self):
       model = tf.keras.Sequential([
            tf.keras.layers.Dense(128, activation = 'tanh', input_shape = (self.train_x.shape)),
            tf.keras.layers.Dense(64, activation = "tanh"),
            tf.keras.layers.Dense(32, activation = "tanh"),
            tf.keras.layers.Dense(1)
        ])

       model.compile(optimizer = self.optimizer, loss = self.loss, metrics = self.metrics)

       model.summary()
        
       return model

    def train(self):
        
        model = self.Model()
        early_stopping = EarlyStopping(monitor = self.monitor, min_delta = self.min_delta, patience = self.patience, verbose =1, mode = 'auto', baseline = None, restore_best_weights = True)
        history = model.fit(self.train_x, self.train_y, epochs = self.epochs, validation_split = self.validation_split, callbacks=(early_stopping))

    def predict(self):
        model = self.Model()
        predict_check = model.predict(self.test_x)

        predict_check = self.scaler_y.inverse_transform(predict_check)
        test_y = self.scaler_y.inverse_transform(self.test_y)
        print("#############  에측 값  ###################")
        print(predict_check)
        print("#############  실제 값  ###################")
        print(test_y)
        
    def variable_setting(self):
        self.loss = 'mse'
        self.optimizer = tf.keras.optimizers.Adam(learning_rate = 0.001)
        self.min_delta = 0.00001
        self.patience = 50
        self.monitor = 'mse'
        self.metrics = ['accuracy']
        self.epochs = 3000
        self.validation_split = 0.25
        
    def start(self):
        self.Data_load()
        self.Data_processing()
        self.train()
        self.predict()
        
Sq = Squat()
Sq.start()
